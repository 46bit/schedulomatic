#!/usr/bin/env python

import os, sys, glob, argparse, csv, time, calendar

class DayTimeUsage:
  def __init__(self, date, start_time, end_time):
    self.date = date
    self.start_minutes = self.time_to_minutes(start_time)
    self.end_minutes = self.time_to_minutes(end_time)

    self.minute_duration = self.end_minutes - self.start_minutes
    self.time_slices = {}
    for i in xrange(self.minute_duration + 1):
      self.time_slices[i] = 1

  def add_event(self, start_time, end_time):
    start_minutes = self.time_to_relative_minutes(start_time)
    end_minutes = self.time_to_relative_minutes(end_time)
    for i in xrange(start_minutes, end_minutes + 1):
      self.time_slices[i] = 0

  def time_to_minutes(self, time):
    return time.tm_hour * 60 + time.tm_min

  def time_to_relative_minutes(self, time):
    return self.time_to_minutes(time) - self.start_minutes

  def relative_minutes_to_time(self, minutes):
    minutes += self.start_minutes
    hour = minutes / 60
    minute = minutes % 60
    return time.strptime(str(hour) + ':' + str(minute), '%H:%M')

  def find_space(self):
    spaces = []
    space_start = -1
    for i in xrange(self.minute_duration + 1):
      if self.time_slices[i] == 1:
        if space_start == -1:
          space_start = i
      else:
        if space_start != -1:
          spaces.append([space_start, i - 1])
          space_start = -1
    if space_start != -1:
      spaces.append([space_start, self.minute_duration])
    return spaces

  def find_space_times(self, minimum=30):
    space_times = []
    for space in self.find_space():
      if space[1] - space[0] < minimum:
        continue
      space_start_time = self.relative_minutes_to_time(space[0])
      space_end_time = self.relative_minutes_to_time(space[1])
      space_times.append([space_start_time, space_end_time])
    return space_times

class Schedulomatic:
  def __init__(self, timetable_directory, day_start_time, day_end_time):
    self.timetable_directory = timetable_directory
    self.day_start_time = day_start_time
    self.day_end_time = day_end_time

    self.daily_time_usages = None
    self.daily_free_time = None

  def find_daily_time_usages(self):
    csv_date_format = '%d/%m/%Y'
    csv_time_format = '%H:%M:%S'

    if not os.path.isdir(self.timetable_directory):
      raise "Timetable directory not found!"

    self.daily_time_usages = {}

    os.chdir(self.timetable_directory)
    for f in glob.glob("*.csv"):
      with open(f, 'rbU') as csvfile:
        csvreader = csv.DictReader(csvfile, skipinitialspace=True)
        for row in csvreader:
          start_date = row['Start Date']
          start_time = row['Start Time']
          end_time = row['End Time']
          if self.is_empty(start_date) or self.is_empty(start_time) or self.is_empty(end_time) or start_date != row['End Date']:
            continue

          start_date = time.strptime(start_date, csv_date_format)
          start_time = time.strptime(start_time, csv_time_format)
          end_time = time.strptime(end_time, csv_time_format)

          if start_date not in self.daily_time_usages:
            dtu = DayTimeUsage(start_date, self.day_start_time, self.day_end_time)
            self.daily_time_usages[start_date] = dtu
          self.daily_time_usages[start_date].add_event(start_time, end_time)

  def find_daily_free_time(self):
    if self.daily_time_usages is None:
      self.find_daily_time_usages()
    self.daily_free_time = {}
    for date in sorted(self.daily_time_usages):
      self.daily_free_time[date] = self.daily_time_usages[date].find_space_times()

  def is_empty(self, v):
    return (v is None or len(v) == 0)

def time_duration(t1, t2):
  second_duration = calendar.timegm(t1) - calendar.timegm(t2)
  hours = second_duration / 3600
  minutes = (second_duration % 3600) / 60
  return [hours, minutes]

def date_is_after(d1, d2):
  # is d1 after d2?
  if (d1.tm_year > d2.tm_year):
    return True
  if (d1.tm_year < d2.tm_year):
    return False
  if (d1.tm_mon > d2.tm_mon):
    return True
  if (d1.tm_mon < d2.tm_mon):
    return False
  if (d1.tm_mday > d2.tm_mday):
    return True
  if (d1.tm_mday < d2.tm_mday):
    return False
  return None

def date_is_before(d1, d2):
  after = date_is_after(d1, d2)
  return not after and after is not None

def offset_date(offset):
  return time.gmtime(time.time() + offset * 86400)

def main():
  argparser = argparse.ArgumentParser(description='Find gaps in timetable CSVs')
  argparser.add_argument('timetable_directory', type=str,
                         help='Directory containing timetable CSVs')
  argparser.add_argument('--start_date', metavar='DD/MM/YYYY', type=str,
                         help='Start date or offset (+/-N) to look from')
  argparser.add_argument('--end_date', metavar='DD/MM/YYYY', type=str,
                         help='End date or offset (+/-N) to look until')
  args = argparser.parse_args()

  date_format = '%A, %d/%m/%Y'
  time_format = '%H:%M'

  if args.start_date:
    if args.start_date[0] == '-' or args.start_date[0] == '+':
      start_date = offset_date(int(args.start_date))
    else:
      start_date = time.strptime(args.start_date, date_format)
  if args.end_date:
    if args.end_date[0] == '-' or args.end_date[0] == '+':
      end_date = offset_date(int(args.end_date))
    else:
      end_date = time.strptime(args.end_date, date_format)

  day_start_time = time.strptime('08:50', time_format)
  day_end_time = time.strptime('21:00', time_format)

  if not os.path.isdir(args.timetable_directory):
    print "Directory {} does not exist.".format(args.timetable_directory)
    return 2

  sched = Schedulomatic(args.timetable_directory, day_start_time, day_end_time)
  sched.find_daily_free_time()

  if args.start_date: print "From", time.strftime(date_format, start_date)
  if args.end_date: print "Until", time.strftime(date_format, end_date)
  if args.start_date or args.end_date: print

  for date in sorted(sched.daily_free_time):
    if args.start_date and date_is_before(date, start_date): continue
    if args.end_date and date_is_after(date, end_date): break

    print time.strftime(date_format, date)
    for free_time in sched.daily_free_time[date]:
      start_time_formatted = time.strftime(time_format, free_time[0])
      end_time_formatted = time.strftime(time_format, free_time[1])

      duration = time_duration(free_time[1], free_time[0])
      duration_formatted = str(duration[0]) + " hours, " + str(duration[1]) + " minutes"

      print "-", start_time_formatted + "-" + end_time_formatted, duration_formatted

if __name__ == "__main__":
  sys.exit(main())
