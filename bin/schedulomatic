#!/usr/bin/env python

import os, sys, glob, argparse, csv

class DaySchedule:
  def __init__(self, date, start_time, end_time):
    self.start_minutes = self.time_to_minutes(start_time)
    self.end_minutes = self.time_to_minutes(end_time)

    self.minute_duration = self.end_minutes - self.start_minutes
    self.time_slices = {}
    for i in xrange(self.minute_duration + 1):
      self.time_slices[i] = 1

  def add_event(self, start_time, end_time):
    start_minutes = self.time_to_relative_minutes(start_time)
    end_minutes = self.time_to_relative_minutes(end_time)
    for i in xrange(start_minutes, end_minutes + 1):
      self.time_slices[i] = 0

  def time_to_minutes(self, time):
    hour, minute, _ = time.split(':')
    return int(hour) * 60 + int(minute)

  def time_to_relative_minutes(self, time):
    return self.time_to_minutes(time) - self.start_minutes

  def relative_minutes_to_time(self, minutes):
    minutes += self.start_minutes
    hour = str(minutes / 60)
    if len(hour) == 1:
      hour = "0" + hour
    minute = str(minutes % 6)
    if len(minute) == 1:
      minute = "0" + minute
    return hour + ":" + minute

  def find_space(self):
    spaces = []
    space_start = -1
    for i in xrange(self.minute_duration + 1):
      if self.time_slices[i] == 1:
        if space_start == -1:
          space_start = i
      else:
        if space_start != -1:
          spaces.append([space_start, i - 1])
          space_start = -1
    if space_start != -1:
      spaces.append([space_start, self.minute_duration])
    return spaces

  def find_space_times(self, minimum=30):
    space_times = []
    for space in self.find_space():
      if space[1] - space[0] < minimum:
        continue
      space_start_time = self.relative_minutes_to_time(space[0])
      space_end_time = self.relative_minutes_to_time(space[1])
      space_times.append([space_start_time, space_end_time])
    return space_times

def is_empty(v):
  return (v is None or len(v) == 0)

def main():
  argparser = argparse.ArgumentParser(description='Find gaps in timetable CSVs')
  argparser.add_argument('timetable_directory', type=str,
                         help='Directory containing timetable CSVs.')
  args = argparser.parse_args()

  if not os.path.isdir(args.timetable_directory):
    print "Directory {} does not exist.".format(args.timetable_directory)
    return 2

  day_start_time = '08:50:00'
  day_end_time = '19:40:00'
  daily_schedules = {}
  total = 0
  skipped = 0
  os.chdir(args.timetable_directory)
  for f in glob.glob("*.csv"):
    with open(f, 'rbU') as csvfile:
      csvreader = csv.DictReader(csvfile, skipinitialspace=True)
      for row in csvreader:
        total += 1
        if is_empty(row['Start Date']) or is_empty(row['Start Time']) or is_empty(row['End Time']):
          skipped += 1
          continue
        if row['Start Date'] not in daily_schedules:
          daily_schedules[row['Start Date']] = DaySchedule(row['Start Date'], day_start_time, day_end_time)
        daily_schedules[row['Start Date']].add_event(row['Start Time'], row['End Time'])

  for d in daily_schedules:
    print d, daily_schedules[d].find_space_times()

if __name__ == "__main__":
  sys.exit(main())
